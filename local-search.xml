<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Basic Computer Graphic Algorithm</title>
    <link href="/2024/07/04/Basic-Computer-Graphic-Algorithm/"/>
    <url>/2024/07/04/Basic-Computer-Graphic-Algorithm/</url>
    
    <content type="html"><![CDATA[<h2 id="z-buffer-rendering"><a href="#z-buffer-rendering" class="headerlink" title="z-buffer rendering"></a>z-buffer rendering</h2><p>一种隐藏面消除技术，记录每个像素的深度值来决定哪个项目应该在前面。对于z来说，1.0表示最远，0.0最近。但我们一般用$\frac{1}{z}$，因为透视投影的线段zbuffer变化并非线性。</p><ol><li>backplane depth(后平面深度): 三维渲染之中最远可以看到的平面，和透视矩阵中最远的平面far plane一个意思。</li><li>z value初始化要设置为1.0而不是0, 在我们进行z-buffer rendering之前所有的物体距离我们最远。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/29/hello-world/"/>
    <url>/2023/11/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UE5 source code reading node</title>
    <link href="/2023/10/20/UE5_source_code_analysis/"/>
    <url>/2023/10/20/UE5_source_code_analysis/</url>
    
    <content type="html"><![CDATA[<h1 id="blueprint-global"><a href="#blueprint-global" class="headerlink" title="blueprint global"></a>blueprint global</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>D3D12_learning_notes</title>
    <link href="/2023/10/18/D3D12-learning-notes/"/>
    <url>/2023/10/18/D3D12-learning-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h1><ol><li>fully understand the meaning of each compoents</li><li>fully write the code of Hello World</li><li>build a ray casting</li><li>build a defered rendering</li></ol><h1 id="graphics-pipeline-in-DirectX-12"><a href="#graphics-pipeline-in-DirectX-12" class="headerlink" title="graphics pipeline in DirectX 12."></a>graphics pipeline in DirectX 12.</h1><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/3.png"                                     ></p><ol><li>Fixed-function stages (blue): cannot change how they process data, but can configure them using the DirectX 12 API. Such as imachines in a factory.</li><li>Programmable stages(green): can write a shadow program like HLSL to define exactly how data is processed. Such as a program a robot in a factory.</li></ol><ul><li><p>Input-Assembler(IA) stage: read primitive data from user-defined vertex and index buffers and assemble that data into geometric primitives.</p></li><li><p>Vertex Shader(VS) Stage<br>transform the vertex data from object-space into clip-space.</p></li><li><p>Hull Shader(HS) Stage<br>It is responsible for determining how much an input control patch should be tessellated by the tesslation.</p></li></ul><h1 id="basics-of-D3D12"><a href="#basics-of-D3D12" class="headerlink" title="basics of D3D12"></a>basics of D3D12</h1><p>Globaly learning DirectX. </p><h2 id="useful-functions"><a href="#useful-functions" class="headerlink" title="useful functions"></a>useful functions</h2><ol><li>IDXGI Factory (DirectX Graphic Infrastructure)<br>Enum Adapters and Creating Swap Chain<div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">GRS_THROW_IF_FAILED</span>(<span class="built_in">CreateDXGIFactory2</span>(nDXGIFactoryFlags, <span class="built_in">IID_PPV_ARGS</span>(&amp;pIDXGIFactory5)));</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="creating-resources"><a href="#creating-resources" class="headerlink" title="creating resources"></a>creating resources</h2><h3 id="CreateCommittedResouce"><a href="#CreateCommittedResouce" class="headerlink" title="CreateCommittedResouce"></a>CreateCommittedResouce</h3><p>implicit heap: the heap object can’t be obtained by the application. Just call the heap and use it directly, do not need to build the heap manually. But hard to control the detail of the heap.</p><h3 id="CreatePlacedResource"><a href="#CreatePlacedResource" class="headerlink" title="CreatePlacedResource"></a>CreatePlacedResource</h3><h3 id="CreatReservedResource"><a href="#CreatReservedResource" class="headerlink" title="CreatReservedResource"></a>CreatReservedResource</h3><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> </span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">D3D12_HEAP_TYPE</span></span><br><span class="line">&#123;</span><br><span class="line">    D3D12_HEAP_TYPE_DEFAULT            = <span class="number">1</span>, </span><br><span class="line">    D3D12_HEAP_TYPE_UPLOAD             = <span class="number">2</span>,</span><br><span class="line">    D3D12_HEAP_TYPE_READBACK           = <span class="number">3</span>,</span><br><span class="line">    D3D12_HEAP_TYPE_CUSTOM              = <span class="number">4</span></span><br><span class="line">&#125; D3D12_HEAP_TYPE;</span><br></pre></td></tr></table></figure></div><ul><li>DEFAULT: creating buffet when D3Dxx_USAGE &#x3D; Default, only GPU  could access the data, CPU can not directly access the data. Which means it usually in $\textbf{video memory}$. Always insert some data hard to change in it, such as texture. </li><li>UPLOAD: GPU can not load the data, so upload heap is using to load the data in DEFAULT heap. For GPU “read only”, For CPU “write only”. For do not change.</li><li>READBACK: the oppsite of UPLOAD</li></ul><h2 id="Resource-Barrier"><a href="#Resource-Barrier" class="headerlink" title="Resource Barrier"></a>Resource Barrier</h2><p>Handle the parallelism problem between copy engine and graphic command engine. Ep. The texture is large enough and $\textbf{memcopy}$ need some time to copy. But the graphic command engine do not know that and already start $\textbf{Draw Call}$ the texture, which lead the unfinished texture to be rendered.</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//send the command to the command heap of copy something from UPLOAD heap to DEFAULT heap</span></span><br><span class="line"><span class="function">CD3DX12_TEXTURE_COPY_LOCATION <span class="title">Dst</span><span class="params">(pITexcute.Get(), <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function">CD3DX12_TEXTURE_COPY_LOCATION <span class="title">Src</span><span class="params">(pITextureUpload.Get(), stTxtLayouts)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// directly command a list&#x27;s object.</span></span><br><span class="line">pICommandList-&gt;<span class="built_in">CopyTextureRegion</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, &amp;Src, <span class="literal">nullptr</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Resource Barrier</span></span><br><span class="line">D3D12_RESOURCE_BARRIER stResBar = &#123;&#125;;</span><br><span class="line">stResBar.Type= D3D12_RESOURCE_BARRIER_TYPE_TRANSITION;</span><br><span class="line">stResBar.Flags= D3D12_RESOURCE_BARRIER_FLAG_NONE;</span><br><span class="line">stResBar.Transition.pResource= pITexcute.<span class="built_in">Get</span>();</span><br><span class="line">stResBar.Transition.StateBefore = D3D12_RESOURCE_STATE_COPY_DEST;</span><br><span class="line">stResBar.Transition.StateAfter= D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;</span><br><span class="line">stResBar.Transition.Subresource = D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES;</span><br><span class="line"> </span><br><span class="line">pICommandList-&gt;<span class="built_in">ResourceBarrier</span>(<span class="number">1</span>, &amp;stResBar);</span><br></pre></td></tr></table></figure></div><p>In my understanding, because command heap’s excution on GPU is in serial order, which means rescource barrier is just like crossbars at supermarket checkout counters.</p><h2 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h2><p>used to looking for a adapter(graphic card)</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ComPtr&lt;IDXGIAdapter4&gt; <span class="title">GetAdapter</span><span class="params">(<span class="type">bool</span> useWarp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ComPtr&lt;IDXGIFactory4&gt; dxgiFactory;</span><br><span class="line">    UINT createFactoryFlags = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_DEBUG)</span></span><br><span class="line">    createFactoryFlags = DXGI_CREATE_FACTORY_DEBUG;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">ThrowIfFailed</span>(<span class="built_in">CreateDXGIFactory2</span>(createFactoryFlags, <span class="built_in">IID_PPV_ARGS</span>(&amp;dxgiFactory)));</span><br><span class="line">   ComPtr&lt;IDXGIAdapter1&gt; dxgiAdapter1;</span><br><span class="line">    ComPtr&lt;IDXGIAdapter4&gt; dxgiAdapter4;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (useWarp)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ThrowIfFailed</span>(dxgiFactory-&gt;<span class="built_in">EnumWarpAdapter</span>(<span class="built_in">IID_PPV_ARGS</span>(&amp;dxgiAdapter1)));</span><br><span class="line">        <span class="built_in">ThrowIfFailed</span>(dxgiAdapter1.<span class="built_in">As</span>(&amp;dxgiAdapter4));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SIZE_T maxDedicatedVideoMemory = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (UINT i = <span class="number">0</span>; dxgiFactory-&gt;<span class="built_in">EnumAdapters1</span>(i, &amp;dxgiAdapter1) != DXGI_ERROR_NOT_FOUND; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            DXGI_ADAPTER_DESC1 dxgiAdapterDesc1;</span><br><span class="line">            dxgiAdapter1-&gt;<span class="built_in">GetDesc1</span>(&amp;dxgiAdapterDesc1);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Check to see if the adapter can create a D3D12 device without actually </span></span><br><span class="line">            <span class="comment">// creating it. The adapter with the largest dedicated video memory</span></span><br><span class="line">            <span class="comment">// is favored.</span></span><br><span class="line">            <span class="keyword">if</span> ((dxgiAdapterDesc1.Flags &amp; DXGI_ADAPTER_FLAG_SOFTWARE) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                <span class="built_in">SUCCEEDED</span>(<span class="built_in">D3D12CreateDevice</span>(dxgiAdapter1.<span class="built_in">Get</span>(), </span><br><span class="line">                    D3D_FEATURE_LEVEL_11_0, __uuidof(ID3D12Device), <span class="literal">nullptr</span>)) &amp;&amp; </span><br><span class="line">                dxgiAdapterDesc1.DedicatedVideoMemory &gt; maxDedicatedVideoMemory )</span><br><span class="line">            &#123;</span><br><span class="line">                maxDedicatedVideoMemory = dxgiAdapterDesc1.DedicatedVideoMemory;</span><br><span class="line">                <span class="built_in">ThrowIfFailed</span>(dxgiAdapter1.<span class="built_in">As</span>(&amp;dxgiAdapter4));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> dxgiAdapter4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Command-List-Command-Allocator-Command-Queue"><a href="#Command-List-Command-Allocator-Command-Queue" class="headerlink" title="Command List, Command Allocator, Command Queue"></a>Command List, Command Allocator, Command Queue</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DirectX 12 Objects</span></span><br><span class="line">ComPtr&lt;ID3D12Device2&gt; g_Device;</span><br><span class="line">ComPtr&lt;ID3D12CommandQueue&gt; g_CommandQueue;</span><br><span class="line">ComPtr&lt;IDXGISwapChain4&gt; g_SwapChain;</span><br><span class="line">ComPtr&lt;ID3D12Resource&gt; g_BackBuffers[g_NumFrames];</span><br><span class="line">ComPtr&lt;ID3D12GraphicsCommandList&gt; g_CommandList;</span><br><span class="line">ComPtr&lt;ID3D12CommandAllocator&gt; g_CommandAllocators[g_NumFrames];</span><br><span class="line">ComPtr&lt;ID3D12DescriptorHeap&gt; g_RTVDescriptorHeap;</span><br><span class="line">UINT g_RTVDescriptorSize;</span><br><span class="line">UINT g_CurrentBackBufferIndex;</span><br></pre></td></tr></table></figure></div><ul><li><p>Comptr: it goes out of scope when COM object is no longer needed, helping to prevent memory leaks.</p></li><li><p>CommandAllocator: create and manage the memory that backs(supports) command list. Every command list need a command allocator, and each command allocator can be used with one command list at a time.</p></li><li><p>Command List: CPU records a list of commands to be executed by GPU. Such as state changes, resource barriers, drawing operations…</p></li><li><p>Command Queue: An interface through which CPU submits the recorded command lists to the GPU for execution. The GPU start excute the command as soon as CPU put command list in it.</p></li></ul><h2 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/6.png"                                     ><br>A marker let you know when GPU has finished doing its work and tell CPU, so they can be synchronised.</p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Synchronization objects</span></span><br><span class="line"><span class="comment">// a pointer used to ensure the synchronization primitive that the CPU can use to determine the eprogress of the GPU&#x27;s execution of command lists.</span></span><br><span class="line">ComPtr&lt;ID3D12Fence&gt; g_Fence;</span><br><span class="line"><span class="comment">// the next fence value to signal the command queue</span></span><br><span class="line"><span class="type">uint64_t</span> g_FenceValue = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// each frame could be &#x27;in-flight&#x27; on the command queue, this is used to keep tracked to guarantee that any resources that are still being referenced by the command queue are not overwritten.</span></span><br><span class="line"><span class="type">uint64_t</span> g_FrameFenceValues[g_NumFrames] = &#123;&#125;;</span><br><span class="line"><span class="comment">// used to hold on untill the fance has reached a specific value.</span></span><br><span class="line">HANDLE g_FenceEvent;</span><br></pre></td></tr></table></figure></div><h2 id="Swap-Chain"><a href="#Swap-Chain" class="headerlink" title="Swap Chain"></a>Swap Chain</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/4.png"                                     ></p><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">unit8_t</span> g_NumFrames = <span class="number">3</span>;</span><br></pre></td></tr></table></figure></div><p>must more than 2 if using flip ppresentation model.</p><h2 id="Transformation-Pipeline"><a href="#Transformation-Pipeline" class="headerlink" title="Transformation Pipeline"></a>Transformation Pipeline</h2><ol><li>World Transform: change each 3D model’s coordinates into world coordinates.</li><li>View Transform: $V &#x3D; T \cdot R_z \cdot R_y \cdot R_z$</li><li>Projection Transform:</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/1.png"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/2.png"                                     ></p><ol start="4"><li>Clip transform: ignore the part not in the camera.</li></ol><h2 id="Render-Target-View-RTV"><a href="#Render-Target-View-RTV" class="headerlink" title="Render Target View(RTV):"></a>Render Target View(RTV):</h2><p>The purpose of it is just tell GPU how to render at back buffer before swap. If without RTV, the GPU will not know where the rendered pixel should be sent.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/D3D12-learning-notes/5.png"                                     ></p><h1 id="glossary-of-CG"><a href="#glossary-of-CG" class="headerlink" title="glossary of CG"></a>glossary of CG</h1><ul><li><p>mipmap: a set of pictures, with different level of pixels. Becasue off-site viewing do not need that detailed.</p></li><li><p>SRV(shader resource view): wrapping textures in a format that the shadow can access them. Read Only. For example : a single texture, individual arrays, planes, or colors from a mipmapped texture, 3D texture, 1D texture color gradinets, etc.</p></li><li><p>UAV(unordered access view): same as SRV, but can read or write in any order, even could read&#x2F;written simultaneously by multipl,e threads without generate memory conflicts.</p></li><li><p>root signatures: link command to the resources the shaders require. It determines the type of data the shaders should expect, but does not define the actural memory or data. For graphics command list has both a graphics and compute root signature, for compute command list have one compute root signature. These root signatures are independent of each others.</p></li><li><p>Resource: all the resource could be excuted by GPU is resource in D3D12. Which is ‘ID3D12Resource’, such as rendering targets(include back buffers), textures, vertex buffers, index buffers… </p></li><li><p>G-SYNC: refresh screen and graph card together.</p></li><li><p>Window Advanced Rasterization Platform(WARP): If did not find a valiable GPU, the system will do the same step of D3D12 by CPU by WARP. It can instead all the rendering method such as rasterization, ray tracing…</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
